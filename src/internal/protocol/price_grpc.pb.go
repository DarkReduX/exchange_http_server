// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.6.1
// source: src/internal/protocol/price.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PriceServiceClient is the client API for PriceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PriceServiceClient interface {
	SendPrice(ctx context.Context, in *Conn, opts ...grpc.CallOption) (PriceService_SendPriceClient, error)
}

type priceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPriceServiceClient(cc grpc.ClientConnInterface) PriceServiceClient {
	return &priceServiceClient{cc}
}

func (c *priceServiceClient) SendPrice(ctx context.Context, in *Conn, opts ...grpc.CallOption) (PriceService_SendPriceClient, error) {
	stream, err := c.cc.NewStream(ctx, &PriceService_ServiceDesc.Streams[0], "/protocol.PriceService/SendPrice", opts...)
	if err != nil {
		return nil, err
	}
	x := &priceServiceSendPriceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PriceService_SendPriceClient interface {
	Recv() (*Price, error)
	grpc.ClientStream
}

type priceServiceSendPriceClient struct {
	grpc.ClientStream
}

func (x *priceServiceSendPriceClient) Recv() (*Price, error) {
	m := new(Price)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PriceServiceServer is the server API for PriceService service.
// All implementations must embed UnimplementedPriceServiceServer
// for forward compatibility
type PriceServiceServer interface {
	SendPrice(*Conn, PriceService_SendPriceServer) error
	mustEmbedUnimplementedPriceServiceServer()
}

// UnimplementedPriceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPriceServiceServer struct {
}

func (UnimplementedPriceServiceServer) SendPrice(*Conn, PriceService_SendPriceServer) error {
	return status.Errorf(codes.Unimplemented, "method SendPrice not implemented")
}
func (UnimplementedPriceServiceServer) mustEmbedUnimplementedPriceServiceServer() {}

// UnsafePriceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PriceServiceServer will
// result in compilation errors.
type UnsafePriceServiceServer interface {
	mustEmbedUnimplementedPriceServiceServer()
}

func RegisterPriceServiceServer(s grpc.ServiceRegistrar, srv PriceServiceServer) {
	s.RegisterService(&PriceService_ServiceDesc, srv)
}

func _PriceService_SendPrice_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Conn)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PriceServiceServer).SendPrice(m, &priceServiceSendPriceServer{stream})
}

type PriceService_SendPriceServer interface {
	Send(*Price) error
	grpc.ServerStream
}

type priceServiceSendPriceServer struct {
	grpc.ServerStream
}

func (x *priceServiceSendPriceServer) Send(m *Price) error {
	return x.ServerStream.SendMsg(m)
}

// PriceService_ServiceDesc is the grpc.ServiceDesc for PriceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PriceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.PriceService",
	HandlerType: (*PriceServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendPrice",
			Handler:       _PriceService_SendPrice_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "src/internal/protocol/price.proto",
}

// PositionServiceClient is the client API for PositionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PositionServiceClient interface {
	SendClosePositionRequest(ctx context.Context, in *PositionCloseReq, opts ...grpc.CallOption) (*Response, error)
	SendOpenPositionRequest(ctx context.Context, in *PositionOpenReq, opts ...grpc.CallOption) (*Response, error)
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	Logout(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Response, error)
	GetUserData(ctx context.Context, in *Token, opts ...grpc.CallOption) (*UserData, error)
	GetUserBalance(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Balance, error)
	Donate(ctx context.Context, in *DonateValue, opts ...grpc.CallOption) (*Response, error)
}

type positionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPositionServiceClient(cc grpc.ClientConnInterface) PositionServiceClient {
	return &positionServiceClient{cc}
}

func (c *positionServiceClient) SendClosePositionRequest(ctx context.Context, in *PositionCloseReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protocol.PositionService/SendClosePositionRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *positionServiceClient) SendOpenPositionRequest(ctx context.Context, in *PositionOpenReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protocol.PositionService/SendOpenPositionRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *positionServiceClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/protocol.PositionService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *positionServiceClient) Logout(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protocol.PositionService/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *positionServiceClient) GetUserData(ctx context.Context, in *Token, opts ...grpc.CallOption) (*UserData, error) {
	out := new(UserData)
	err := c.cc.Invoke(ctx, "/protocol.PositionService/GetUserData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *positionServiceClient) GetUserBalance(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Balance, error) {
	out := new(Balance)
	err := c.cc.Invoke(ctx, "/protocol.PositionService/GetUserBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *positionServiceClient) Donate(ctx context.Context, in *DonateValue, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protocol.PositionService/Donate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PositionServiceServer is the server API for PositionService service.
// All implementations must embed UnimplementedPositionServiceServer
// for forward compatibility
type PositionServiceServer interface {
	SendClosePositionRequest(context.Context, *PositionCloseReq) (*Response, error)
	SendOpenPositionRequest(context.Context, *PositionOpenReq) (*Response, error)
	Login(context.Context, *LoginReq) (*LoginResp, error)
	Logout(context.Context, *Token) (*Response, error)
	GetUserData(context.Context, *Token) (*UserData, error)
	GetUserBalance(context.Context, *Token) (*Balance, error)
	Donate(context.Context, *DonateValue) (*Response, error)
	mustEmbedUnimplementedPositionServiceServer()
}

// UnimplementedPositionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPositionServiceServer struct {
}

func (UnimplementedPositionServiceServer) SendClosePositionRequest(context.Context, *PositionCloseReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendClosePositionRequest not implemented")
}
func (UnimplementedPositionServiceServer) SendOpenPositionRequest(context.Context, *PositionOpenReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOpenPositionRequest not implemented")
}
func (UnimplementedPositionServiceServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedPositionServiceServer) Logout(context.Context, *Token) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedPositionServiceServer) GetUserData(context.Context, *Token) (*UserData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserData not implemented")
}
func (UnimplementedPositionServiceServer) GetUserBalance(context.Context, *Token) (*Balance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBalance not implemented")
}
func (UnimplementedPositionServiceServer) Donate(context.Context, *DonateValue) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Donate not implemented")
}
func (UnimplementedPositionServiceServer) mustEmbedUnimplementedPositionServiceServer() {}

// UnsafePositionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PositionServiceServer will
// result in compilation errors.
type UnsafePositionServiceServer interface {
	mustEmbedUnimplementedPositionServiceServer()
}

func RegisterPositionServiceServer(s grpc.ServiceRegistrar, srv PositionServiceServer) {
	s.RegisterService(&PositionService_ServiceDesc, srv)
}

func _PositionService_SendClosePositionRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionCloseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PositionServiceServer).SendClosePositionRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.PositionService/SendClosePositionRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PositionServiceServer).SendClosePositionRequest(ctx, req.(*PositionCloseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PositionService_SendOpenPositionRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionOpenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PositionServiceServer).SendOpenPositionRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.PositionService/SendOpenPositionRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PositionServiceServer).SendOpenPositionRequest(ctx, req.(*PositionOpenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PositionService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PositionServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.PositionService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PositionServiceServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PositionService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PositionServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.PositionService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PositionServiceServer).Logout(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _PositionService_GetUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PositionServiceServer).GetUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.PositionService/GetUserData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PositionServiceServer).GetUserData(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _PositionService_GetUserBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PositionServiceServer).GetUserBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.PositionService/GetUserBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PositionServiceServer).GetUserBalance(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _PositionService_Donate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DonateValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PositionServiceServer).Donate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.PositionService/Donate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PositionServiceServer).Donate(ctx, req.(*DonateValue))
	}
	return interceptor(ctx, in, info, handler)
}

// PositionService_ServiceDesc is the grpc.ServiceDesc for PositionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PositionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.PositionService",
	HandlerType: (*PositionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendClosePositionRequest",
			Handler:    _PositionService_SendClosePositionRequest_Handler,
		},
		{
			MethodName: "SendOpenPositionRequest",
			Handler:    _PositionService_SendOpenPositionRequest_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _PositionService_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _PositionService_Logout_Handler,
		},
		{
			MethodName: "GetUserData",
			Handler:    _PositionService_GetUserData_Handler,
		},
		{
			MethodName: "GetUserBalance",
			Handler:    _PositionService_GetUserBalance_Handler,
		},
		{
			MethodName: "Donate",
			Handler:    _PositionService_Donate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/internal/protocol/price.proto",
}
